using System.Text;
using Microsoft.CodeAnalysis;
using Microsoft.CodeAnalysis.CSharp;


namespace ScribanGen;


[Generator(LanguageNames.CSharp)]
public class ScribanIncrementalGenerator : IIncrementalGenerator
{
    public void Initialize(IncrementalGeneratorInitializationContext context)
    {
        var files = context.AdditionalTextsProvider
            .Where(static file => file.Path.EndsWith(".scriban"))
            .Select(static (file, token) =>
            {
                var source = file.GetText(token)?.ToString() ?? string.Empty;
                return new ScribanFile(file.Path, source);
            })
            .Where(static x => x.IsNotEmpty());

        var filesToInclude = files.Where(static file => file.CanBeIncluded());
        var filesToRender = files.Where(static file => file.ShouldBeRendered());

        // Templates can include other templates that start with underscore
        var filesWithDependencies = filesToRender.Combine(filesToInclude.Collect()).Select(
            static (arg, _) =>
            {
                var (template, includedTemplates) = arg;
                var builder = new StringBuilder();
                foreach (var includedTemplate in includedTemplates)
                {
                    if (!template.Text.Contains(includedTemplate.FileName())) continue;
                    builder.AppendLine(includedTemplate.FileName());
                    builder.AppendLine(includedTemplate.Text);
                }

                return (template, builder.ToString());
            });

        context.RegisterSourceOutput(filesToInclude, static (productionContext, scriban) =>
            ScribanRenderer.Parse(scriban, productionContext.ReportDiagnostic));

        var formatCodeProvider = context.FormatCodeProvider();
        context.RegisterSourceOutput(filesWithDependencies.Combine(formatCodeProvider),
            static (productionContext, arg) =>
            {
                var (file, formatCode) = arg;
                RenderScribanTemplate(productionContext, file.template, formatCode);
            });
    }


    private static void RenderScribanTemplate(SourceProductionContext context, ScribanFile template,
        bool formatCode)
    {
        var token = context.CancellationToken;

        if (token.IsCancellationRequested) return;
        var source = ScribanRenderer.Render(template, context.ReportDiagnostic);

        if (token.IsCancellationRequested) return;

        var templateFileName = template.FileName();
        var generatedFromStr = $"Generated by ScribanGen from '{templateFileName}'";
        var separatorStr = new string('=', generatedFromStr.Length);

        source =
            "// " + separatorStr + Environment.NewLine +
            "// " + generatedFromStr + Environment.NewLine +
            "// " + separatorStr + Environment.NewLine +
            source;

        var generatedFileName = Path.GetFileNameWithoutExtension(template.FilePath);
        if (formatCode)
        {
            var tree = CSharpSyntaxTree.ParseText(source);
            source = tree.GetRoot().NormalizeWhitespace().ToString();
        }

        context.AddSource(generatedFileName + ".g.cs", source);
    }


    [ThreadStatic] private static ScribanRenderer? _scribanRenderer;


    private static ScribanRenderer ScribanRenderer
    {
        get
        {
            _scribanRenderer ??= new ScribanRenderer();
            return _scribanRenderer;
        }
    }
}